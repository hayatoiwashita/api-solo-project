openapi: 3.0.3
info:
  title: ToDo Management API
  description: It provides some function for to-do management.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /todos:
    get:
      tags:
        - todos
      summary: Get all To-Do.
      description: Returns an array of Todos model.
      parameters: []
      responses: 
        '200': 
          description: A JSON array of Todos model.
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/Todos'
                example:
                  - id: 1
                    user_id: 123
                    title: "Preparation of the project"
                    content: "Create a template project "
                    status: "DONE"
                    createdAt: "2020-11-13T06:21:04.876Z"
                    updatedAt: "2020-11-13T06:21:04.876Z"
                  - id: 2
                    user_id: 456
                    title: "Building a DB"
                    content: "Building a Postgresql"
                    status: "DONE"
                    createdAt: "2020-11-13T06:21:04.876Z"
                    updatedAt: "2020-11-13T06:21:04.876Z"
    post:
      tags:
        - todos
      summary: Creat new To-Do.
      description: Creat new To-Do.
      parameters: []
      requestBody:
        description: ToDo to create
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Todos'
            example:
              user_id: 321
              title: "Sample request"
              content: "Create sample ToDo"
              status: "New"
      responses:
        '201':
          description: CREATED
  /todos/{id}:
    get:
      tags:
        - todos
      summary: Get specified To-Do.
      description: Returns an Todos model.
      parameters: 
        - name: id
          in: path
          description: todos id
          required: true
          schema:
            type: integer
          example: 1
      responses: 
        '200': 
          description: A JSON of Todos model.
          content:
            application/json:
              schema: 
                type: object
                items:
                  $ref: '#/components/schemas/Todos'
                example:
                  - id: 1
                    user_id: 123
                    title: "Preparation of the project"
                    content: "Create a template project "
                    status: "DONE"
    patch:
      tags:
        - todos
      summary: Update specified items of ToDo.
      description: Update specified items of ToDo.
      parameters: 
        - name: id
          in: path
          description: todos id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: Items to update
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Todos'
            example:
              status: "PROGRESS"
      responses: 
        '200': 
          description: OK
    put:
      tags:
        - todos
      summary: Replace specified TODO.
      description: Replace specified TODO.
      parameters: 
        - name: id
          in: path
          description: todos id
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        description: Items to replace
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Todos'
            example:
              title: "Replace title and status"
              status: "PROGRESS"
      responses: 
        '200': 
          description: OK
    delete:
      tags:
        - todos
      summary: Delete specified To-Do.
      description: Delete specified To-Do.
      parameters: 
        - name: id
          in: path
          description: todos id
          required: true
          schema:
            type: integer
          example: 1
      responses: 
        '200': 
          description: OK
components:
  schemas:
    Todos:
      type: object
      required:
        - id
        - user_id
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
        status:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
